[:find (pull ?org [:github.org/installation-token
                   :git.org/name
                   :git.provider/url])
 ?commit-sha
 (pull ?repo [:git.repo/source-id
              :git.repo/name
              :git.provider/url])
 :in $ $before-db %
 :where
 (or-join [?commit]
   ;; the tag caused this to fire again?
   #_(and
     (tx-entity-id :git.ref/commit ?ref)
     [?ref :git.ref/commit ?commit]
     [?ref :git.ref/type :git.ref.type/branch])
   (and
     (tx-entity-id :github.checkrun/name ?last-checkrun)
     [?last-checkrun :github.checkrun/checksuite ?checksuite]
     [?checksuite :github.checksuite/commit ?commit]
     [?last-checkrun :github.checkrun/name ?check-run-name]
     [(!= "lein m2 deploy" ?check-run-name)]))


 [?commit :git.commit/repo ?repo]
 [?repo :git.repo/org ?org]
 [?commit :git.commit/sha ?commit-sha]

 ;; only clojure projects

 [?repo-language :git.repo-language/repo ?repo]
 [(ground "Clojure") ?clojure-language]
 [?repo-language :git.repo-language/name ?clojure-language]

 ;; need some rules for this - should be contributed by content-indexer-skill

 ;; project-clj must exist
 [(ground "path-exists") ?exists-index]
 [(ground "project.clj") ?project-clj-path]
 [?fp :atomist.content.index/commit ?commit]
 [?fp :atomist.content.index/name ?exists-index]
 [?fp :atomist.content.index/value ?project-clj-path]

 ;; dockerfiles must not exist
 [(identity ["Dockerfile" "docker/Dockerfile" "docker/Dockerfile.gcr"]) ?docker-files]
 [(q (quote [:find (count ?fp)
             :in $ ?commit [?docker-file ...]
             :where
             [(ground "path-not-exists") ?not-exists-index]
             [?fp :atomist.content.index/commit ?commit]
             [?fp :atomist.content.index/name ?not-exists-index]
             [?fp :atomist.content.index/value ?docker-file]])
    $ ?commit ?docker-files)
  [[?fp-count]]]
 [(count ?docker-files) ?fp-count]

 ;; checks (if configured) must have passed
 (get-config-value "check-names" [] ?check-run-names)

 (or-join [?commit ?check-run-names]
   [(empty? ?check-run-names)]
   (and
     ;; count of successful checkruns that have the right name
     [?cs :github.checksuite/commit ?commit]
     [(q (quote [:find (distinct ?check-run-name)
                 :in $ ?checksuite
                 :where
                 [?checkrun :github.checkrun/checksuite ?checksuite]
                 [?checkrun :github.checkrun/status :github.checkrun.status/completed]
                 [?checkrun :github.checkrun/name ?check-run-name]])
        $ ?cs)
      [[?distinct-check-run-names]]]
     [((fn [s1 s2] (clojure.set/subset? (set s2) (set s1))) ?distinct-check-run-names ?check-run-names)]))]